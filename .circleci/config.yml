version: 2.1

orbs:
  aws-cli: circleci/aws-cli@5.4.1

executors:
  dotnet:
    docker:
      - image: mcr.microsoft.com/dotnet/sdk:9.0

commands:
  setup-aws-cli:
    parameters:
      role_arn:
        type: string
      region:
        type: string
    steps:
      - aws-cli/setup:
          role_arn: << parameters.role_arn >>
          region: << parameters.region >>

  login-to-aws-ecr:
    parameters:
      region:
        type: string
      account_id:
        type: string
    steps:
      - run:
          name: Login to AWS ECR
          command: |
            aws ecr get-login-password --region << parameters.region >> | \
            docker login \
              --username AWS \
              --password-stdin << parameters.account_id >>.dkr.ecr.<< parameters.region >>.amazonaws.com

  convert-test-results:
    parameters:
      output-test-dir:
        type: string
        default: test-results
        description: 'test results directory'
    steps:
      - run:
          name: Install trx2junit and Convert Test Results
          command: |
            dotnet tool install -g trx2junit
            export PATH="$PATH:/root/.dotnet/tools"
            trx2junit "./<< parameters.output-test-dir >>/*.trx"

jobs:
  build:
    executor: dotnet
    steps:
      - checkout
      - run:
          name: Build
          command: dotnet build --configuration Release

  unit-test:
    environment:
      TEST_RESULTS_DIR: test-results
    executor: dotnet
    steps:
      - checkout
      - run:
          name: Run Unit Tests
          command: |
            dotnet test \
              --filter "Category=Unit" \
              --logger "trx;LogFileName=results.trx" \
              --results-directory "./$TEST_RESULTS_DIR"
      - convert-test-results:
          output-test-dir: "$TEST_RESULTS_DIR"
      - store_test_results:
          path: "./$TEST_RESULTS_DIR"

  build-image-and-push:
    docker:
      - image: cimg/aws:2025.01
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - setup-aws-cli:
          role_arn: $AWS_ROLE_ARN
          region: $AWS_REGION
      - run:
          name: Build Docker Image
          command: |
            docker build \
              -t $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/olliverberry/ci:$CIRCLE_SHA1 \
              -f docker/Dockerfile .
      - login-to-aws-ecr:
          region: $AWS_REGION
          account_id: $AWS_ACCOUNT_ID
      - run:
          name: Push Docker Image
          command: |
            docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/olliverberry/ci:$CIRCLE_SHA1

  functional-test:
    docker:
      - image: mcr.microsoft.com/dotnet/sdk:9.0
      - image: $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/olliverberry/ci:$CIRCLE_SHA1
        aws_auth:
          oidc_role_arn: $AWS_ROLE_ARN
      - image: cimg/postgres:18.0
        environment:
          - POSTGRES_USER=$POSTGRES_USER
          - POSTGRES_PASSWORD=$POSTGRES_PASSWORD
    environment:
      TEST_RESULTS_DIR: test-results
    steps:
      - checkout
      - run:
          name: Run Functional Tests
          command: |
            dotnet test \
              --filter "Category=Functional" \
              --logger "trx;LogFileName=results.trx" \
              --results-directory "./$TEST_RESULTS_DIR"
      - convert-test-results:
          output-test-dir: "$TEST_RESULTS_DIR"
      - store_test_results:
          path: "./$TEST_RESULTS_DIR"

workflows:
  build-test-push:
    jobs:
      - build
      - unit-test
      - build-image-and-push:
          requires:
            - build
            - unit-test
      - functional-test:
          requires:
            - build-image-and-push